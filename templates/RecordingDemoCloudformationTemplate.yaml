# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  ECSTaskCpu:
    Type: Number
    Default: 4096
  ECSTaskMemory:
    Type: Number
    Default: 8192
  ECSContainerName:
    Type: String
    Default: 'container-townhall-broadcast'
  ECSContainerCpu:
    Type: Number
    Default: 4096
  ECSContainerMemory:
    Type: Number
    Default: 8192
  ECSContainerMemoryReservation:
    Type: Number
    Default: 8192
  EcsClusterName:
    Type: String
    Description: 'Specifies the ECS Cluster Name with which the resources would be associated'
    Default: 'EC2ClusterTownhallBroadcast'
  ECRDockerImageArn:
    Type: String
    Description: 'ARN of the docker image stored in ECR along with the tag'
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: environment-townhall-broadcast
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
Resources:
  
  TownhallBroadcastECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: townhall-broadcast-ecs-log-group
      RetentionInDays: 365
  
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
        ClusterName: 
            Ref: EcsClusterName
  
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security group for container 
        GroupName: container-security=group
        VpcId: !Ref VPC
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !Ref ContainerSecurityGroup
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
  
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  
  ECSTownhallBroadcastTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
        Cpu: 
            Ref: ECSTaskCpu
        Memory: 
            Ref: ECSTaskMemory
        RequiresCompatibilities:
            - EC2
            - FARGATE
        NetworkMode: awsvpc
        ExecutionRoleArn: !Ref ECSTaskExecutionRole
        ContainerDefinitions:
            - Name: 
                Ref: ECSContainerName
              Cpu: 
                Ref: ECSContainerCpu
              Memory: 
                Ref: ECSContainerMemory
              MemoryReservation: 
                Ref: ECSContainerMemoryReservation
              Essential: true
              Image:
                Ref: ECRDockerImageArn
              LogConfiguration:
                LogDriver: awslogs
                Options:
                  awslogs-group: 
                    Ref: TownhallBroadcastECSLogGroup
                  awslogs-region: 
                    Ref: AWS::Region
                  awslogs-stream-prefix: 
                    Ref: ECSContainerName
  
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: townhall-broadcast-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTownhallBroadcastTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId

# Refer: https://docs.aws.amazon.com/codebuild/latest/userguide/cloudformation-vpc-template.html
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2